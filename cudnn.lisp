;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.10
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant CUDNN_MAJOR 5)

(cl:defconstant CUDNN_MINOR 1)

(cl:defconstant CUDNN_PATCHLEVEL 10)

(cl:defconstant CUDNN_VERSION (cl:* 5 (cl:+ 1000 1) (cl:+ 100 10)))

(cffi:defcfun ("cudnnGetVersion" cudnnGetVersion) :pointer)

(cffi:defcenum cudnnStatus_t
	(:CUDNN_STATUS_SUCCESS #.0)
	(:CUDNN_STATUS_NOT_INITIALIZED #.1)
	(:CUDNN_STATUS_ALLOC_FAILED #.2)
	(:CUDNN_STATUS_BAD_PARAM #.3)
	(:CUDNN_STATUS_INTERNAL_ERROR #.4)
	(:CUDNN_STATUS_INVALID_VALUE #.5)
	(:CUDNN_STATUS_ARCH_MISMATCH #.6)
	(:CUDNN_STATUS_MAPPING_ERROR #.7)
	(:CUDNN_STATUS_EXECUTION_FAILED #.8)
	(:CUDNN_STATUS_NOT_SUPPORTED #.9)
	(:CUDNN_STATUS_LICENSE_ERROR #.10))

(cffi:defcfun ("cudnnGetErrorString" cudnnGetErrorString) :string
  (status cudnnStatus_t))

(cffi:defcfun ("cudnnCreate" cudnnCreate) cudnnStatus_t
  (handle :pointer))

(cffi:defcfun ("cudnnDestroy" cudnnDestroy) cudnnStatus_t
  (handle :pointer))

(cffi:defcfun ("cudnnSetStream" cudnnSetStream) cudnnStatus_t
  (handle :pointer)
  (streamId :pointer))

(cffi:defcfun ("cudnnGetStream" cudnnGetStream) cudnnStatus_t
  (handle :pointer)
  (streamId :pointer))

(cffi:defcenum cudnnDataType_t
	(:CUDNN_DATA_FLOAT #.0)
	(:CUDNN_DATA_DOUBLE #.1)
	(:CUDNN_DATA_HALF #.2))

(cffi:defcenum cudnnNanPropagation_t
	(:CUDNN_NOT_PROPAGATE_NAN #.0)
	(:CUDNN_PROPAGATE_NAN #.1))

(cl:defconstant CUDNN_DIM_MAX 8)

(cffi:defcfun ("cudnnCreateTensorDescriptor" cudnnCreateTensorDescriptor) cudnnStatus_t
  (tensorDesc :pointer))

(cffi:defcenum cudnnTensorFormat_t
	(:CUDNN_TENSOR_NCHW #.0)
	(:CUDNN_TENSOR_NHWC #.1))

(cffi:defcfun ("cudnnSetTensor4dDescriptor" cudnnSetTensor4dDescriptor) cudnnStatus_t
  (tensorDesc :pointer)
  (format cudnnTensorFormat_t)
  (dataType cudnnDataType_t)
  (n :int)
  (c :int)
  (h :int)
  (w :int))

(cffi:defcfun ("cudnnSetTensor4dDescriptorEx" cudnnSetTensor4dDescriptorEx) cudnnStatus_t
  (tensorDesc :pointer)
  (dataType cudnnDataType_t)
  (n :int)
  (c :int)
  (h :int)
  (w :int)
  (nStride :int)
  (cStride :int)
  (hStride :int)
  (wStride :int))

(cffi:defcfun ("cudnnGetTensor4dDescriptor" cudnnGetTensor4dDescriptor) cudnnStatus_t
  (tensorDesc :pointer)
  (dataType :pointer)
  (n :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer)
  (nStride :pointer)
  (cStride :pointer)
  (hStride :pointer)
  (wStride :pointer))

(cffi:defcfun ("cudnnSetTensorNdDescriptor" cudnnSetTensorNdDescriptor) cudnnStatus_t
  (tensorDesc :pointer)
  (dataType cudnnDataType_t)
  (nbDims :int)
  (dimA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnGetTensorNdDescriptor" cudnnGetTensorNdDescriptor) cudnnStatus_t
  (tensorDesc :pointer)
  (nbDimsRequested :int)
  (dataType :pointer)
  (nbDims :pointer)
  (dimA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnDestroyTensorDescriptor" cudnnDestroyTensorDescriptor) cudnnStatus_t
  (tensorDesc :pointer))

(cffi:defcfun ("cudnnTransformTensor" cudnnTransformTensor) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnAddTensor" cudnnAddTensor) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (aDesc :pointer)
  (A :pointer)
  (beta :pointer)
  (cDesc :pointer)
  (C :pointer))

(cffi:defcenum cudnnOpTensorOp_t
	(:CUDNN_OP_TENSOR_ADD #.0)
	(:CUDNN_OP_TENSOR_MUL #.1)
	(:CUDNN_OP_TENSOR_MIN #.2)
	(:CUDNN_OP_TENSOR_MAX #.3))

(cffi:defcfun ("cudnnCreateOpTensorDescriptor" cudnnCreateOpTensorDescriptor) cudnnStatus_t
  (opTensorDesc :pointer))

(cffi:defcfun ("cudnnSetOpTensorDescriptor" cudnnSetOpTensorDescriptor) cudnnStatus_t
  (opTensorDesc :pointer)
  (opTensorOp cudnnOpTensorOp_t)
  (opTensorCompType cudnnDataType_t)
  (opTensorNanOpt cudnnNanPropagation_t))

(cffi:defcfun ("cudnnGetOpTensorDescriptor" cudnnGetOpTensorDescriptor) cudnnStatus_t
  (opTensorDesc :pointer)
  (opTensorOp :pointer)
  (opTensorCompType :pointer)
  (opTensorNanOpt :pointer))

(cffi:defcfun ("cudnnDestroyOpTensorDescriptor" cudnnDestroyOpTensorDescriptor) cudnnStatus_t
  (opTensorDesc :pointer))

(cffi:defcfun ("cudnnOpTensor" cudnnOpTensor) cudnnStatus_t
  (handle :pointer)
  (opTensorDesc :pointer)
  (alpha1 :pointer)
  (aDesc :pointer)
  (A :pointer)
  (alpha2 :pointer)
  (bDesc :pointer)
  (B :pointer)
  (beta :pointer)
  (cDesc :pointer)
  (C :pointer))

(cffi:defcfun ("cudnnSetTensor" cudnnSetTensor) cudnnStatus_t
  (handle :pointer)
  (yDesc :pointer)
  (y :pointer)
  (valuePtr :pointer))

(cffi:defcfun ("cudnnScaleTensor" cudnnScaleTensor) cudnnStatus_t
  (handle :pointer)
  (yDesc :pointer)
  (y :pointer)
  (alpha :pointer))

(cffi:defcenum cudnnConvolutionMode_t
	(:CUDNN_CONVOLUTION #.0)
	(:CUDNN_CROSS_CORRELATION #.1))

(cffi:defcfun ("cudnnCreateFilterDescriptor" cudnnCreateFilterDescriptor) cudnnStatus_t
  (filterDesc :pointer))

(cffi:defcfun ("cudnnSetFilter4dDescriptor" cudnnSetFilter4dDescriptor) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (format cudnnTensorFormat_t)
  (k :int)
  (c :int)
  (h :int)
  (w :int))

(cffi:defcfun ("cudnnGetFilter4dDescriptor" cudnnGetFilter4dDescriptor) cudnnStatus_t
  (filterDesc :pointer)
  (dataType :pointer)
  (format :pointer)
  (k :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer))

(cffi:defcfun ("cudnnSetFilterNdDescriptor" cudnnSetFilterNdDescriptor) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (format cudnnTensorFormat_t)
  (nbDims :int)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnGetFilterNdDescriptor" cudnnGetFilterNdDescriptor) cudnnStatus_t
  (filterDesc :pointer)
  (nbDimsRequested :int)
  (dataType :pointer)
  (format :pointer)
  (nbDims :pointer)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnDestroyFilterDescriptor" cudnnDestroyFilterDescriptor) cudnnStatus_t
  (filterDesc :pointer))

(cffi:defcfun ("cudnnCreateConvolutionDescriptor" cudnnCreateConvolutionDescriptor) cudnnStatus_t
  (convDesc :pointer))

(cffi:defcfun ("cudnnSetConvolution2dDescriptor" cudnnSetConvolution2dDescriptor) cudnnStatus_t
  (convDesc :pointer)
  (pad_h :int)
  (pad_w :int)
  (u :int)
  (v :int)
  (upscalex :int)
  (upscaley :int)
  (mode cudnnConvolutionMode_t))

(cffi:defcfun ("cudnnSetConvolution2dDescriptor_v5" cudnnSetConvolution2dDescriptor_v5) cudnnStatus_t
  (convDesc :pointer)
  (pad_h :int)
  (pad_w :int)
  (u :int)
  (v :int)
  (upscalex :int)
  (upscaley :int)
  (mode cudnnConvolutionMode_t)
  (dataType cudnnDataType_t))

(cffi:defcfun ("cudnnGetConvolution2dDescriptor" cudnnGetConvolution2dDescriptor) cudnnStatus_t
  (convDesc :pointer)
  (pad_h :pointer)
  (pad_w :pointer)
  (u :pointer)
  (v :pointer)
  (upscalex :pointer)
  (upscaley :pointer)
  (mode :pointer))

(cffi:defcfun ("cudnnGetConvolution2dDescriptor_v5" cudnnGetConvolution2dDescriptor_v5) cudnnStatus_t
  (convDesc :pointer)
  (pad_h :pointer)
  (pad_w :pointer)
  (u :pointer)
  (v :pointer)
  (upscalex :pointer)
  (upscaley :pointer)
  (mode :pointer)
  (dataType :pointer))

(cffi:defcfun ("cudnnGetConvolution2dForwardOutputDim" cudnnGetConvolution2dForwardOutputDim) cudnnStatus_t
  (convDesc :pointer)
  (inputTensorDesc :pointer)
  (filterDesc :pointer)
  (n :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer))

(cffi:defcfun ("cudnnSetConvolutionNdDescriptor" cudnnSetConvolutionNdDescriptor) cudnnStatus_t
  (convDesc :pointer)
  (arrayLength :int)
  (padA :pointer)
  (filterStrideA :pointer)
  (upscaleA :pointer)
  (mode cudnnConvolutionMode_t)
  (dataType cudnnDataType_t))

(cffi:defcfun ("cudnnGetConvolutionNdDescriptor" cudnnGetConvolutionNdDescriptor) cudnnStatus_t
  (convDesc :pointer)
  (arrayLengthRequested :int)
  (arrayLength :pointer)
  (padA :pointer)
  (strideA :pointer)
  (upscaleA :pointer)
  (mode :pointer)
  (dataType :pointer))

(cffi:defcfun ("cudnnGetConvolutionNdForwardOutputDim" cudnnGetConvolutionNdForwardOutputDim) cudnnStatus_t
  (convDesc :pointer)
  (inputTensorDesc :pointer)
  (filterDesc :pointer)
  (nbDims :int)
  (tensorOuputDimA :pointer))

(cffi:defcfun ("cudnnDestroyConvolutionDescriptor" cudnnDestroyConvolutionDescriptor) cudnnStatus_t
  (convDesc :pointer))

(cffi:defcenum cudnnConvolutionFwdPreference_t
	(:CUDNN_CONVOLUTION_FWD_NO_WORKSPACE #.0)
	(:CUDNN_CONVOLUTION_FWD_PREFER_FASTEST #.1)
	(:CUDNN_CONVOLUTION_FWD_SPECIFY_WORKSPACE_LIMIT #.2))

(cffi:defcenum cudnnConvolutionFwdAlgo_t
	(:CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_GEMM #.0)
	(:CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM #.1)
	(:CUDNN_CONVOLUTION_FWD_ALGO_GEMM #.2)
	(:CUDNN_CONVOLUTION_FWD_ALGO_DIRECT #.3)
	(:CUDNN_CONVOLUTION_FWD_ALGO_FFT #.4)
	(:CUDNN_CONVOLUTION_FWD_ALGO_FFT_TILING #.5)
	(:CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD #.6)
	(:CUDNN_CONVOLUTION_FWD_ALGO_WINOGRAD_NONFUSED #.7))

(cffi:defcstruct cudnnConvolutionFwdAlgoPerf_t
	(algo cudnnConvolutionFwdAlgo_t)
	(status cudnnStatus_t)
	(time :float)
	(memory :pointer))

(cffi:defcfun ("cudnnFindConvolutionForwardAlgorithm" cudnnFindConvolutionForwardAlgorithm) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (wDesc :pointer)
  (convDesc :pointer)
  (yDesc :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer))

(cffi:defcfun ("cudnnFindConvolutionForwardAlgorithmEx" cudnnFindConvolutionForwardAlgorithmEx) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (x :pointer)
  (wDesc :pointer)
  (w :pointer)
  (convDesc :pointer)
  (yDesc :pointer)
  (y :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnGetConvolutionForwardAlgorithm" cudnnGetConvolutionForwardAlgorithm) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (wDesc :pointer)
  (convDesc :pointer)
  (yDesc :pointer)
  (preference cudnnConvolutionFwdPreference_t)
  (memoryLimitInBytes :pointer)
  (algo :pointer))

(cffi:defcfun ("cudnnGetConvolutionForwardWorkspaceSize" cudnnGetConvolutionForwardWorkspaceSize) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (wDesc :pointer)
  (convDesc :pointer)
  (yDesc :pointer)
  (algo cudnnConvolutionFwdAlgo_t)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnConvolutionForward" cudnnConvolutionForward) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (wDesc :pointer)
  (w :pointer)
  (convDesc :pointer)
  (algo cudnnConvolutionFwdAlgo_t)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnConvolutionBackwardBias" cudnnConvolutionBackwardBias) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (beta :pointer)
  (dbDesc :pointer)
  (db :pointer))

(cffi:defcenum cudnnConvolutionBwdFilterPreference_t
	(:CUDNN_CONVOLUTION_BWD_FILTER_NO_WORKSPACE #.0)
	(:CUDNN_CONVOLUTION_BWD_FILTER_PREFER_FASTEST #.1)
	(:CUDNN_CONVOLUTION_BWD_FILTER_SPECIFY_WORKSPACE_LIMIT #.2))

(cffi:defcenum cudnnConvolutionBwdFilterAlgo_t
	(:CUDNN_CONVOLUTION_BWD_FILTER_ALGO_0 #.0)
	(:CUDNN_CONVOLUTION_BWD_FILTER_ALGO_1 #.1)
	(:CUDNN_CONVOLUTION_BWD_FILTER_ALGO_FFT #.2)
	(:CUDNN_CONVOLUTION_BWD_FILTER_ALGO_3 #.3)
	(:CUDNN_CONVOLUTION_BWD_FILTER_ALGO_WINOGRAD_NONFUSED #.5))

(cffi:defcstruct cudnnConvolutionBwdFilterAlgoPerf_t
	(algo cudnnConvolutionBwdFilterAlgo_t)
	(status cudnnStatus_t)
	(time :float)
	(memory :pointer))

(cffi:defcfun ("cudnnFindConvolutionBackwardFilterAlgorithm" cudnnFindConvolutionBackwardFilterAlgorithm) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (dwDesc :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer))

(cffi:defcfun ("cudnnFindConvolutionBackwardFilterAlgorithmEx" cudnnFindConvolutionBackwardFilterAlgorithmEx) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (x :pointer)
  (dyDesc :pointer)
  (y :pointer)
  (convDesc :pointer)
  (dwDesc :pointer)
  (dw :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnGetConvolutionBackwardFilterAlgorithm" cudnnGetConvolutionBackwardFilterAlgorithm) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (dwDesc :pointer)
  (preference cudnnConvolutionBwdFilterPreference_t)
  (memoryLimitInBytes :pointer)
  (algo :pointer))

(cffi:defcfun ("cudnnGetConvolutionBackwardFilterWorkspaceSize" cudnnGetConvolutionBackwardFilterWorkspaceSize) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (gradDesc :pointer)
  (algo cudnnConvolutionBwdFilterAlgo_t)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnConvolutionBackwardFilter" cudnnConvolutionBackwardFilter) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (convDesc :pointer)
  (algo cudnnConvolutionBwdFilterAlgo_t)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer)
  (beta :pointer)
  (dwDesc :pointer)
  (dw :pointer))

(cffi:defcenum cudnnConvolutionBwdDataPreference_t
	(:CUDNN_CONVOLUTION_BWD_DATA_NO_WORKSPACE #.0)
	(:CUDNN_CONVOLUTION_BWD_DATA_PREFER_FASTEST #.1)
	(:CUDNN_CONVOLUTION_BWD_DATA_SPECIFY_WORKSPACE_LIMIT #.2))

(cffi:defcenum cudnnConvolutionBwdDataAlgo_t
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_0 #.0)
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_1 #.1)
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT #.2)
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_FFT_TILING #.3)
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD #.4)
	(:CUDNN_CONVOLUTION_BWD_DATA_ALGO_WINOGRAD_NONFUSED #.5))

(cffi:defcstruct cudnnConvolutionBwdDataAlgoPerf_t
	(algo cudnnConvolutionBwdDataAlgo_t)
	(status cudnnStatus_t)
	(time :float)
	(memory :pointer))

(cffi:defcfun ("cudnnFindConvolutionBackwardDataAlgorithm" cudnnFindConvolutionBackwardDataAlgorithm) cudnnStatus_t
  (handle :pointer)
  (wDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (dxDesc :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer))

(cffi:defcfun ("cudnnFindConvolutionBackwardDataAlgorithmEx" cudnnFindConvolutionBackwardDataAlgorithmEx) cudnnStatus_t
  (handle :pointer)
  (wDesc :pointer)
  (w :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (convDesc :pointer)
  (dxDesc :pointer)
  (dx :pointer)
  (requestedAlgoCount :int)
  (returnedAlgoCount :pointer)
  (perfResults :pointer)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnGetConvolutionBackwardDataAlgorithm" cudnnGetConvolutionBackwardDataAlgorithm) cudnnStatus_t
  (handle :pointer)
  (wDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (dxDesc :pointer)
  (preference cudnnConvolutionBwdDataPreference_t)
  (memoryLimitInBytes :pointer)
  (algo :pointer))

(cffi:defcfun ("cudnnGetConvolutionBackwardDataWorkspaceSize" cudnnGetConvolutionBackwardDataWorkspaceSize) cudnnStatus_t
  (handle :pointer)
  (wDesc :pointer)
  (dyDesc :pointer)
  (convDesc :pointer)
  (dxDesc :pointer)
  (algo cudnnConvolutionBwdDataAlgo_t)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnConvolutionBackwardData" cudnnConvolutionBackwardData) cudnnStatus_t
  (handle :pointer)
  (alpha :pointer)
  (wDesc :pointer)
  (w :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (convDesc :pointer)
  (algo cudnnConvolutionBwdDataAlgo_t)
  (workSpace :pointer)
  (workSpaceSizeInBytes :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcfun ("cudnnIm2Col" cudnnIm2Col) cudnnStatus_t
  (handle :pointer)
  (xDesc :pointer)
  (x :pointer)
  (wDesc :pointer)
  (convDesc :pointer)
  (colBuffer :pointer))

(cffi:defcenum cudnnSoftmaxAlgorithm_t
	(:CUDNN_SOFTMAX_FAST #.0)
	(:CUDNN_SOFTMAX_ACCURATE #.1)
	(:CUDNN_SOFTMAX_LOG #.2))

(cffi:defcenum cudnnSoftmaxMode_t
	(:CUDNN_SOFTMAX_MODE_INSTANCE #.0)
	(:CUDNN_SOFTMAX_MODE_CHANNEL #.1))

(cffi:defcfun ("cudnnSoftmaxForward" cudnnSoftmaxForward) cudnnStatus_t
  (handle :pointer)
  (algo cudnnSoftmaxAlgorithm_t)
  (mode cudnnSoftmaxMode_t)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnSoftmaxBackward" cudnnSoftmaxBackward) cudnnStatus_t
  (handle :pointer)
  (algo cudnnSoftmaxAlgorithm_t)
  (mode cudnnSoftmaxMode_t)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcenum cudnnPoolingMode_t
	(:CUDNN_POOLING_MAX #.0)
	(:CUDNN_POOLING_AVERAGE_COUNT_INCLUDE_PADDING #.1)
	(:CUDNN_POOLING_AVERAGE_COUNT_EXCLUDE_PADDING #.2))

(cffi:defcfun ("cudnnCreatePoolingDescriptor" cudnnCreatePoolingDescriptor) cudnnStatus_t
  (poolingDesc :pointer))

(cffi:defcfun ("cudnnSetPooling2dDescriptor" cudnnSetPooling2dDescriptor) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (maxpoolingNanOpt cudnnNanPropagation_t)
  (windowHeight :int)
  (windowWidth :int)
  (verticalPadding :int)
  (horizontalPadding :int)
  (verticalStride :int)
  (horizontalStride :int))

(cffi:defcfun ("cudnnGetPooling2dDescriptor" cudnnGetPooling2dDescriptor) cudnnStatus_t
  (poolingDesc :pointer)
  (mode :pointer)
  (maxpoolingNanOpt :pointer)
  (windowHeight :pointer)
  (windowWidth :pointer)
  (verticalPadding :pointer)
  (horizontalPadding :pointer)
  (verticalStride :pointer)
  (horizontalStride :pointer))

(cffi:defcfun ("cudnnSetPoolingNdDescriptor" cudnnSetPoolingNdDescriptor) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (maxpoolingNanOpt cudnnNanPropagation_t)
  (nbDims :int)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnGetPoolingNdDescriptor" cudnnGetPoolingNdDescriptor) cudnnStatus_t
  (poolingDesc :pointer)
  (nbDimsRequested :int)
  (mode :pointer)
  (maxpoolingNanOpt :pointer)
  (nbDims :pointer)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnGetPoolingNdForwardOutputDim" cudnnGetPoolingNdForwardOutputDim) cudnnStatus_t
  (poolingDesc :pointer)
  (inputTensorDesc :pointer)
  (nbDims :int)
  (outputTensorDimA :pointer))

(cffi:defcfun ("cudnnGetPooling2dForwardOutputDim" cudnnGetPooling2dForwardOutputDim) cudnnStatus_t
  (poolingDesc :pointer)
  (inputTensorDesc :pointer)
  (n :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer))

(cffi:defcfun ("cudnnDestroyPoolingDescriptor" cudnnDestroyPoolingDescriptor) cudnnStatus_t
  (poolingDesc :pointer))

(cffi:defcfun ("cudnnPoolingForward" cudnnPoolingForward) cudnnStatus_t
  (handle :pointer)
  (poolingDesc :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnPoolingBackward" cudnnPoolingBackward) cudnnStatus_t
  (handle :pointer)
  (poolingDesc :pointer)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcenum cudnnActivationMode_t
	(:CUDNN_ACTIVATION_SIGMOID #.0)
	(:CUDNN_ACTIVATION_RELU #.1)
	(:CUDNN_ACTIVATION_TANH #.2)
	(:CUDNN_ACTIVATION_CLIPPED_RELU #.3))

(cffi:defcfun ("cudnnCreateActivationDescriptor" cudnnCreateActivationDescriptor) cudnnStatus_t
  (activationDesc :pointer))

(cffi:defcfun ("cudnnSetActivationDescriptor" cudnnSetActivationDescriptor) cudnnStatus_t
  (activationDesc :pointer)
  (mode cudnnActivationMode_t)
  (reluNanOpt cudnnNanPropagation_t)
  (reluCeiling :double))

(cffi:defcfun ("cudnnGetActivationDescriptor" cudnnGetActivationDescriptor) cudnnStatus_t
  (activationDesc :pointer)
  (mode :pointer)
  (reluNanOpt :pointer)
  (reluCeiling :pointer))

(cffi:defcfun ("cudnnDestroyActivationDescriptor" cudnnDestroyActivationDescriptor) cudnnStatus_t
  (activationDesc :pointer))

(cffi:defcfun ("cudnnActivationForward" cudnnActivationForward) cudnnStatus_t
  (handle :pointer)
  (activationDesc :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnActivationBackward" cudnnActivationBackward) cudnnStatus_t
  (handle :pointer)
  (activationDesc :pointer)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcfun ("cudnnCreateLRNDescriptor" cudnnCreateLRNDescriptor) cudnnStatus_t
  (normDesc :pointer))

(cl:defconstant CUDNN_LRN_MIN_N 1)

(cl:defconstant CUDNN_LRN_MAX_N 16)

(cl:defconstant CUDNN_LRN_MIN_K 1d-5)

(cl:defconstant CUDNN_LRN_MIN_BETA 0.01d0)

(cffi:defcenum cudnnLRNMode_t
	(:CUDNN_LRN_CROSS_CHANNEL_DIM1 #.0))

(cffi:defcfun ("cudnnSetLRNDescriptor" cudnnSetLRNDescriptor) cudnnStatus_t
  (normDesc :pointer)
  (lrnN :unsigned-int)
  (lrnAlpha :double)
  (lrnBeta :double)
  (lrnK :double))

(cffi:defcfun ("cudnnGetLRNDescriptor" cudnnGetLRNDescriptor) cudnnStatus_t
  (normDesc :pointer)
  (lrnN :pointer)
  (lrnAlpha :pointer)
  (lrnBeta :pointer)
  (lrnK :pointer))

(cffi:defcfun ("cudnnDestroyLRNDescriptor" cudnnDestroyLRNDescriptor) cudnnStatus_t
  (lrnDesc :pointer))

(cffi:defcfun ("cudnnLRNCrossChannelForward" cudnnLRNCrossChannelForward) cudnnStatus_t
  (handle :pointer)
  (normDesc :pointer)
  (lrnMode cudnnLRNMode_t)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnLRNCrossChannelBackward" cudnnLRNCrossChannelBackward) cudnnStatus_t
  (handle :pointer)
  (normDesc :pointer)
  (lrnMode cudnnLRNMode_t)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcenum cudnnDivNormMode_t
	(:CUDNN_DIVNORM_PRECOMPUTED_MEANS #.0))

(cffi:defcfun ("cudnnDivisiveNormalizationForward" cudnnDivisiveNormalizationForward) cudnnStatus_t
  (handle :pointer)
  (normDesc :pointer)
  (mode cudnnDivNormMode_t)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (means :pointer)
  (temp :pointer)
  (temp2 :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnDivisiveNormalizationBackward" cudnnDivisiveNormalizationBackward) cudnnStatus_t
  (handle :pointer)
  (normDesc :pointer)
  (mode cudnnDivNormMode_t)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (means :pointer)
  (dy :pointer)
  (temp :pointer)
  (temp2 :pointer)
  (beta :pointer)
  (dXdMeansDesc :pointer)
  (dx :pointer)
  (dMeans :pointer))

(cffi:defcenum cudnnBatchNormMode_t
	(:CUDNN_BATCHNORM_PER_ACTIVATION #.0)
	(:CUDNN_BATCHNORM_SPATIAL #.1))

(cl:defconstant CUDNN_BN_MIN_EPSILON 1d-5)

(cffi:defcfun ("cudnnDeriveBNTensorDescriptor" cudnnDeriveBNTensorDescriptor) cudnnStatus_t
  (derivedBnDesc :pointer)
  (xDesc :pointer)
  (mode cudnnBatchNormMode_t))

(cffi:defcfun ("cudnnBatchNormalizationForwardTraining" cudnnBatchNormalizationForwardTraining) cudnnStatus_t
  (handle :pointer)
  (mode cudnnBatchNormMode_t)
  (alpha :pointer)
  (beta :pointer)
  (xDesc :pointer)
  (x :pointer)
  (yDesc :pointer)
  (y :pointer)
  (bnScaleBiasMeanVarDesc :pointer)
  (bnScale :pointer)
  (bnBias :pointer)
  (exponentialAverageFactor :double)
  (resultRunningMean :pointer)
  (resultRunningVariance :pointer)
  (epsilon :double)
  (resultSaveMean :pointer)
  (resultSaveInvVariance :pointer))

(cffi:defcfun ("cudnnBatchNormalizationForwardInference" cudnnBatchNormalizationForwardInference) cudnnStatus_t
  (handle :pointer)
  (mode cudnnBatchNormMode_t)
  (alpha :pointer)
  (beta :pointer)
  (xDesc :pointer)
  (x :pointer)
  (yDesc :pointer)
  (y :pointer)
  (bnScaleBiasMeanVarDesc :pointer)
  (bnScale :pointer)
  (bnBias :pointer)
  (estimatedMean :pointer)
  (estimatedVariance :pointer)
  (epsilon :double))

(cffi:defcfun ("cudnnBatchNormalizationBackward" cudnnBatchNormalizationBackward) cudnnStatus_t
  (handle :pointer)
  (mode cudnnBatchNormMode_t)
  (alphaDataDiff :pointer)
  (betaDataDiff :pointer)
  (alphaParamDiff :pointer)
  (betaParamDiff :pointer)
  (xDesc :pointer)
  (x :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (dxDesc :pointer)
  (dx :pointer)
  (dBnScaleBiasDesc :pointer)
  (bnScale :pointer)
  (dBnScaleResult :pointer)
  (dBnBiasResult :pointer)
  (epsilon :double)
  (savedMean :pointer)
  (savedInvVariance :pointer))

(cffi:defcenum cudnnSamplerType_t
	(:CUDNN_SAMPLER_BILINEAR #.0))

(cffi:defcfun ("cudnnCreateSpatialTransformerDescriptor" cudnnCreateSpatialTransformerDescriptor) cudnnStatus_t
  (stDesc :pointer))

(cffi:defcfun ("cudnnSetSpatialTransformerNdDescriptor" cudnnSetSpatialTransformerNdDescriptor) cudnnStatus_t
  (stDesc :pointer)
  (samplerType cudnnSamplerType_t)
  (dataType cudnnDataType_t)
  (nbDims :int)
  (dimA :pointer))

(cffi:defcfun ("cudnnDestroySpatialTransformerDescriptor" cudnnDestroySpatialTransformerDescriptor) cudnnStatus_t
  (stDesc :pointer))

(cffi:defcfun ("cudnnSpatialTfGridGeneratorForward" cudnnSpatialTfGridGeneratorForward) cudnnStatus_t
  (handle :pointer)
  (stDesc :pointer)
  (theta :pointer)
  (grid :pointer))

(cffi:defcfun ("cudnnSpatialTfGridGeneratorBackward" cudnnSpatialTfGridGeneratorBackward) cudnnStatus_t
  (handle :pointer)
  (stDesc :pointer)
  (dgrid :pointer)
  (dtheta :pointer))

(cffi:defcfun ("cudnnSpatialTfSamplerForward" cudnnSpatialTfSamplerForward) cudnnStatus_t
  (handle :pointer)
  (stDesc :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (grid :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnSpatialTfSamplerBackward" cudnnSpatialTfSamplerBackward) cudnnStatus_t
  (handle :pointer)
  (stDesc :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer)
  (alphaDgrid :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (grid :pointer)
  (betaDgrid :pointer)
  (dgrid :pointer))

(cffi:defcfun ("cudnnCreateDropoutDescriptor" cudnnCreateDropoutDescriptor) cudnnStatus_t
  (dropoutDesc :pointer))

(cffi:defcfun ("cudnnDestroyDropoutDescriptor" cudnnDestroyDropoutDescriptor) cudnnStatus_t
  (dropoutDesc :pointer))

(cffi:defcfun ("cudnnDropoutGetStatesSize" cudnnDropoutGetStatesSize) cudnnStatus_t
  (handle :pointer)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnDropoutGetReserveSpaceSize" cudnnDropoutGetReserveSpaceSize) cudnnStatus_t
  (xdesc :pointer)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnSetDropoutDescriptor" cudnnSetDropoutDescriptor) cudnnStatus_t
  (dropoutDesc :pointer)
  (handle :pointer)
  (dropout :float)
  (states :pointer)
  (stateSizeInBytes :pointer)
  (seed :unsigned-long-long))

(cffi:defcfun ("cudnnDropoutForward" cudnnDropoutForward) cudnnStatus_t
  (handle :pointer)
  (dropoutDesc :pointer)
  (xdesc :pointer)
  (x :pointer)
  (ydesc :pointer)
  (y :pointer)
  (reserveSpace :pointer)
  (reserveSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnDropoutBackward" cudnnDropoutBackward) cudnnStatus_t
  (handle :pointer)
  (dropoutDesc :pointer)
  (dydesc :pointer)
  (dy :pointer)
  (dxdesc :pointer)
  (dx :pointer)
  (reserveSpace :pointer)
  (reserveSpaceSizeInBytes :pointer))

(cffi:defcenum cudnnRNNMode_t
	(:CUDNN_RNN_RELU #.0)
	(:CUDNN_RNN_TANH #.1)
	(:CUDNN_LSTM #.2)
	(:CUDNN_GRU #.3))

(cffi:defcenum cudnnDirectionMode_t
	(:CUDNN_UNIDIRECTIONAL #.0)
	(:CUDNN_BIDIRECTIONAL #.1))

(cffi:defcenum cudnnRNNInputMode_t
	(:CUDNN_LINEAR_INPUT #.0)
	(:CUDNN_SKIP_INPUT #.1))

(cffi:defcfun ("cudnnCreateRNNDescriptor" cudnnCreateRNNDescriptor) cudnnStatus_t
  (rnnDesc :pointer))

(cffi:defcfun ("cudnnDestroyRNNDescriptor" cudnnDestroyRNNDescriptor) cudnnStatus_t
  (rnnDesc :pointer))

(cffi:defcfun ("cudnnSetRNNDescriptor" cudnnSetRNNDescriptor) cudnnStatus_t
  (rnnDesc :pointer)
  (hiddenSize :int)
  (numLayers :int)
  (dropoutDesc :pointer)
  (inputMode cudnnRNNInputMode_t)
  (direction cudnnDirectionMode_t)
  (mode cudnnRNNMode_t)
  (dataType cudnnDataType_t))

(cffi:defcfun ("cudnnGetRNNWorkspaceSize" cudnnGetRNNWorkspaceSize) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (xDesc :pointer)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnGetRNNTrainingReserveSize" cudnnGetRNNTrainingReserveSize) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (xDesc :pointer)
  (sizeInBytes :pointer))

(cffi:defcfun ("cudnnGetRNNParamsSize" cudnnGetRNNParamsSize) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (xDesc :pointer)
  (sizeInBytes :pointer)
  (dataType cudnnDataType_t))

(cffi:defcfun ("cudnnGetRNNLinLayerMatrixParams" cudnnGetRNNLinLayerMatrixParams) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (layer :int)
  (xDesc :pointer)
  (wDesc :pointer)
  (w :pointer)
  (linLayerID :int)
  (linLayerMatDesc :pointer)
  (linLayerMat :pointer))

(cffi:defcfun ("cudnnGetRNNLinLayerBiasParams" cudnnGetRNNLinLayerBiasParams) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (layer :int)
  (xDesc :pointer)
  (wDesc :pointer)
  (w :pointer)
  (linLayerID :int)
  (linLayerBiasDesc :pointer)
  (linLayerBias :pointer))

(cffi:defcfun ("cudnnRNNForwardInference" cudnnRNNForwardInference) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (xDesc :pointer)
  (x :pointer)
  (hxDesc :pointer)
  (hx :pointer)
  (cxDesc :pointer)
  (cx :pointer)
  (wDesc :pointer)
  (w :pointer)
  (yDesc :pointer)
  (y :pointer)
  (hyDesc :pointer)
  (hy :pointer)
  (cyDesc :pointer)
  (cy :pointer)
  (workspace :pointer)
  (workSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnRNNForwardTraining" cudnnRNNForwardTraining) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (xDesc :pointer)
  (x :pointer)
  (hxDesc :pointer)
  (hx :pointer)
  (cxDesc :pointer)
  (cx :pointer)
  (wDesc :pointer)
  (w :pointer)
  (yDesc :pointer)
  (y :pointer)
  (hyDesc :pointer)
  (hy :pointer)
  (cyDesc :pointer)
  (cy :pointer)
  (workspace :pointer)
  (workSpaceSizeInBytes :pointer)
  (reserveSpace :pointer)
  (reserveSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnRNNBackwardData" cudnnRNNBackwardData) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (dhyDesc :pointer)
  (dhy :pointer)
  (dcyDesc :pointer)
  (dcy :pointer)
  (wDesc :pointer)
  (w :pointer)
  (hxDesc :pointer)
  (hx :pointer)
  (cxDesc :pointer)
  (cx :pointer)
  (dxDesc :pointer)
  (dx :pointer)
  (dhxDesc :pointer)
  (dhx :pointer)
  (dcxDesc :pointer)
  (dcx :pointer)
  (workspace :pointer)
  (workSpaceSizeInBytes :pointer)
  (reserveSpace :pointer)
  (reserveSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnRNNBackwardWeights" cudnnRNNBackwardWeights) cudnnStatus_t
  (handle :pointer)
  (rnnDesc :pointer)
  (seqLength :int)
  (xDesc :pointer)
  (x :pointer)
  (hxDesc :pointer)
  (hx :pointer)
  (yDesc :pointer)
  (y :pointer)
  (workspace :pointer)
  (workSpaceSizeInBytes :pointer)
  (dwDesc :pointer)
  (dw :pointer)
  (reserveSpace :pointer)
  (reserveSpaceSizeInBytes :pointer))

(cffi:defcfun ("cudnnSetFilter4dDescriptor_v3" cudnnSetFilter4dDescriptor_v3) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (k :int)
  (c :int)
  (h :int)
  (w :int))

(cffi:defcfun ("cudnnSetFilter4dDescriptor_v4" cudnnSetFilter4dDescriptor_v4) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (format cudnnTensorFormat_t)
  (k :int)
  (c :int)
  (h :int)
  (w :int))

(cffi:defcfun ("cudnnGetFilter4dDescriptor_v3" cudnnGetFilter4dDescriptor_v3) cudnnStatus_t
  (filterDesc :pointer)
  (dataType :pointer)
  (k :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer))

(cffi:defcfun ("cudnnGetFilter4dDescriptor_v4" cudnnGetFilter4dDescriptor_v4) cudnnStatus_t
  (filterDesc :pointer)
  (dataType :pointer)
  (format :pointer)
  (k :pointer)
  (c :pointer)
  (h :pointer)
  (w :pointer))

(cffi:defcfun ("cudnnSetFilterNdDescriptor_v3" cudnnSetFilterNdDescriptor_v3) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (nbDims :int)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnSetFilterNdDescriptor_v4" cudnnSetFilterNdDescriptor_v4) cudnnStatus_t
  (filterDesc :pointer)
  (dataType cudnnDataType_t)
  (format cudnnTensorFormat_t)
  (nbDims :int)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnGetFilterNdDescriptor_v3" cudnnGetFilterNdDescriptor_v3) cudnnStatus_t
  (filterDesc :pointer)
  (nbDimsRequested :int)
  (dataType :pointer)
  (nbDims :pointer)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnGetFilterNdDescriptor_v4" cudnnGetFilterNdDescriptor_v4) cudnnStatus_t
  (filterDesc :pointer)
  (nbDimsRequested :int)
  (dataType :pointer)
  (format :pointer)
  (nbDims :pointer)
  (filterDimA :pointer))

(cffi:defcfun ("cudnnSetPooling2dDescriptor_v3" cudnnSetPooling2dDescriptor_v3) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (windowHeight :int)
  (windowWidth :int)
  (verticalPadding :int)
  (horizontalPadding :int)
  (verticalStride :int)
  (horizontalStride :int))

(cffi:defcfun ("cudnnSetPooling2dDescriptor_v4" cudnnSetPooling2dDescriptor_v4) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (maxpoolingNanOpt cudnnNanPropagation_t)
  (windowHeight :int)
  (windowWidth :int)
  (verticalPadding :int)
  (horizontalPadding :int)
  (verticalStride :int)
  (horizontalStride :int))

(cffi:defcfun ("cudnnGetPooling2dDescriptor_v3" cudnnGetPooling2dDescriptor_v3) cudnnStatus_t
  (poolingDesc :pointer)
  (mode :pointer)
  (windowHeight :pointer)
  (windowWidth :pointer)
  (verticalPadding :pointer)
  (horizontalPadding :pointer)
  (verticalStride :pointer)
  (horizontalStride :pointer))

(cffi:defcfun ("cudnnGetPooling2dDescriptor_v4" cudnnGetPooling2dDescriptor_v4) cudnnStatus_t
  (poolingDesc :pointer)
  (mode :pointer)
  (maxpoolingNanOpt :pointer)
  (windowHeight :pointer)
  (windowWidth :pointer)
  (verticalPadding :pointer)
  (horizontalPadding :pointer)
  (verticalStride :pointer)
  (horizontalStride :pointer))

(cffi:defcfun ("cudnnSetPoolingNdDescriptor_v3" cudnnSetPoolingNdDescriptor_v3) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (nbDims :int)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnSetPoolingNdDescriptor_v4" cudnnSetPoolingNdDescriptor_v4) cudnnStatus_t
  (poolingDesc :pointer)
  (mode cudnnPoolingMode_t)
  (maxpoolingNanOpt cudnnNanPropagation_t)
  (nbDims :int)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnGetPoolingNdDescriptor_v3" cudnnGetPoolingNdDescriptor_v3) cudnnStatus_t
  (poolingDesc :pointer)
  (nbDimsRequested :int)
  (mode :pointer)
  (nbDims :pointer)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnGetPoolingNdDescriptor_v4" cudnnGetPoolingNdDescriptor_v4) cudnnStatus_t
  (poolingDesc :pointer)
  (nbDimsRequested :int)
  (mode :pointer)
  (maxpoolingNanOpt :pointer)
  (nbDims :pointer)
  (windowDimA :pointer)
  (paddingA :pointer)
  (strideA :pointer))

(cffi:defcfun ("cudnnActivationForward_v3" cudnnActivationForward_v3) cudnnStatus_t
  (handle :pointer)
  (mode cudnnActivationMode_t)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnActivationForward_v4" cudnnActivationForward_v4) cudnnStatus_t
  (handle :pointer)
  (activationDesc :pointer)
  (alpha :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (yDesc :pointer)
  (y :pointer))

(cffi:defcfun ("cudnnActivationBackward_v3" cudnnActivationBackward_v3) cudnnStatus_t
  (handle :pointer)
  (mode cudnnActivationMode_t)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))

(cffi:defcfun ("cudnnActivationBackward_v4" cudnnActivationBackward_v4) cudnnStatus_t
  (handle :pointer)
  (activationDesc :pointer)
  (alpha :pointer)
  (yDesc :pointer)
  (y :pointer)
  (dyDesc :pointer)
  (dy :pointer)
  (xDesc :pointer)
  (x :pointer)
  (beta :pointer)
  (dxDesc :pointer)
  (dx :pointer))


